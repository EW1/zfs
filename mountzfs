#!/bin/bash
#
# Mount / unmount the ZFS filesystems
#
# Copyright Manuel Amador (Rudd-O) <rudd-o@rudd-o.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2.1 of the GNU Lesser General Public License
# as published by the Free Software Foundation.
# 
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# mountzfs	ZFS filesystem management
# chkconfig:	2345 01 99
# description:	Mount / unmount the ZFS filesystems upon boot / shutdown.
#
### BEGIN INIT INFO
# Provides:		zfs
# Required-Start:	$local_fs
# Required-Stop:	$local_fs
# Should-Stop:		
# Short-Description:	mount / unmount the ZFS filesystems upon boot / shutdown
# Description:		mount / unmount the ZFS filesystems upon boot / shutdown
### END INIT INFO

ZPOOL=/sbin/zpool
ZFS=/sbin/zfs
servicename=mountzfs

# Sanity checks
[ -x $ZPOOL ] || exit 1
[ -x $ZFS ] || exit 1
[ -e /dev/zfs ] || exit 1

# Source function library & LSB routines
. /etc/rc.d/init.d/functions
log_success_msg () {
    echo -n $*; success "$*"; echo
}
log_failure_msg () {
    echo -n $*; failure "$*"; echo
}
log_warning_msg () {
    echo -n $*; warning "$*"; echo
}

RETVAL=0

start()
{
	if [ -f "/var/lock/subsys/$servicename" ] ; then return 0 ; fi

	mountshaszfs=`cat /proc/mounts | awk ' $3 == "zfs" { print $0 } '`
	mtabhaszfs=`cat /etc/mtab | awk ' $3 == "zfs" { print $0 } '`

	if [ "$mountshaszfs" != "$mtabhaszfs" ] ; then

		echo -n $"Registering already-mounted ZFS filesystems: "
		mtab=`echo "$mountshaszfs" ; cat /etc/mtab`
		echo "$mtab" > /etc/mtab
		log_success_msg

	fi

        if [ -f /etc/zfs/zpool.cache ] ; then
	
		echo -n $"Importing ZFS pools not yet imported: "
		$ZPOOL import -c /etc/zfs/zpool.cache -aN || true # stupid zpool will fail if all pools are already imported
		RETVAL=$?
		if [ $RETVAL -ne 0 ]; then
			log_failure_msg
			return 6
		fi
		log_success_msg
	
	fi
	
	echo -n $"Mounting ZFS filesystems not yet mounted: "
	$ZFS mount -a
	RETVAL=$?
	if [ $RETVAL -ne 0 ]; then
		log_failure_msg
		return 7
	fi
	log_success_msg
	
	touch /var/lock/subsys/$servicename
}

stop()
{
	if [ ! -f "/var/lock/subsys/$servicename" ] ; then return 0 ; fi

	# the poweroff of the system takes care of this
	# but it never unmounts the root filesystem itself
	# shit

	sync # about the only thing we can do, and then we
	     # hope that the umount process will succeed
	     # unfortunately the umount process does not dismount
	     # the root file system, there ought to be some way
	     # we can tell zfs to just flush anything in memory
	     # when a request to remount,ro comes in

	#echo -n $"Unmounting ZFS filesystems: "
	#$ZFS umount -a
	#RETVAL=$?
	#if [ $RETVAL -ne 0 ]; then
	#	log_failure_msg
	#	return 8
	#fi
	#log_success_msg
	
	rm -f /var/lock/subsys/$servicename
}

# See how we are called
case "$1" in
	start)
		start
		RETVAL=$?
		;;
	stop)
		stop
		RETVAL=$?
		;;
	status)
		$ZPOOL status && echo && $ZFS list
		RETVAL=$?
		;;
	restart)
		stop
		start
		;;
	condrestart)
		if [ -f /var/lock/subsys/$servicename ] ; then
			stop
			start
		fi
		;;
	*)
		echo $"Usage: $0 {start|stop|status|restart|condrestart}"
		;;
esac

exit $RETVAL
