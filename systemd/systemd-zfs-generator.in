#!/bin/bash

set -e

exec >> /dev/kmsg
exec 2>&1

@sbindir@/zpool --help >/dev/null 2>&1 || {
	exit 0
}

getarg() {
    local _o _found _key _cmdline
    unset _o
    unset _found
    _key=$1
    shift
    _cmdline="$@"
    set --
    for _o in $_cmdline; do
        if [ "$_o" = "$_key" ]; then
            _found=1;
        elif [ "${_o%%=*}" = "${_key%=}" ]; then
            [ -n "${_o%%=*}" ] && set -- "$@" "${_o#*=}";
            _found=1;
        fi
    done
    if [ -n "$_found" ]; then
        [ $# -gt 0 ] && echo -n "$@"
        return 0
    fi
    return 1;
}

getargbool() {
    local _b
    unset _b
    local _default
    _default=$1; shift
    _b=$(getarg "$@")
    [ $? -ne 0 -a -z "$_b" ] && _b=$_default
    if [ -n "$_b" ]; then
        [ $_b = "0" ] && return 1
        [ $_b = "no" ] && return 1
        [ $_b = "off" ] && return 1
    fi
    return 0
}

scriptname=`basename "$0"`
scriptdir=`dirname "$0"`
cmdline=`cat /proc/cmdline`
echo "$scriptname: ZFS support available"

### this feature is for delaying zpool import if devices have not appeared yet
devices_to_wait_for=$(getarg zfs_systemd_wait_for_device $cmdline) || true
if [ "$devices_to_wait_for" != "" ] ; then
    deciseconds=600
    while [ "$deciseconds" != "0" ] ; do
	all_devices_found=yes
	for device in $devices_to_wait_for ; do
	    test -e "$device" || {
		all_devices_found=
		if [ "$deciseconds" != "0" ] ; then
		    echo "$scriptname: device $device has not appeared in 60 seconds"
		fi
	    }
	done
	if [ "$all_devices_found" == "yes" ] ; then
	    echo "$scriptname: all requisite devices appeared: $devices_to_wait_for"
	    break
	fi
	sleep 0.1
	deciseconds=$(( $deciseconds - 1 ))
    done
fi

echo "$scriptname: pool status before import"
@sbindir@/zpool status -v || true

force=
getargbool 0 zfs_force $cmdline && {
    force=-f
    echo "$scriptname: forcibly importing all pools available on the system"
} || {
    echo "$scriptname: importing all pools that were imported before last reboot"
}

@sbindir@/zpool import -aN $force || true

echo "$scriptname: pool status after import"
@sbindir@/zpool status -v || true

gendir="$1"
if [ -z "$gendir" ] ; then gendir=/run/systemd/generator ; fi
mkdir -p "$gendir/local-fs.target.requires"

escaper="$scriptdir"/../systemdescaper
[ -x "$escaper" ] || escaper=@systemddir@/systemdescaper
[ -x "$escaper" ] || escaper=./systemdescaper
[ -x "$escaper" ] || escaper=systemdescaper

function escaping() {
	"$escaper" --escape "$1"
}

function getdeps() {

	mountpoint=`dirname "$1"`
	while true ; do
		if [ "$mountpoint" == "/" ] ; then break ; fi
		if grep -Fxq "$mountpoint" "$gendir"/mountpoints ; then
			echo -n `escaping "$mountpoint"`.mount
			echo -n " "
		fi
		mountpoint=`dirname "$mountpoint"`
	done

}

# preparations
rm -f "$gendir"/listing "$gendir"/listing2 "$gendir"/mountpoints
touch "$gendir"/mountpoints

echo "$scriptname: discovering early available ZFS file systems"
@sbindir@/zfs list -H -o name,mountpoint,canmount > "$gendir"/listing

echo "$scriptname: discovering root ZFS file system"
zfsrootparentfs=
zfsrootparentname=
zfsrootfs=`cat /proc/mounts | grep ' / zfs ' | awk ' { print $1 } ' | head -1` || true
if [ -n "$zfsrootfs" ] ; then
#   zfsrootfs=`fstab-decode echo "$zfsrootfs"`
#   fstab-decode no longer exists, need to find a replacement
#   meanwhile filesystems with spaces in their names won't work
    echo "$scriptname: root ZFS file system is $zfsrootfs"
    zfsrootparentfs=`dirname "$zfsrootfs"`
    zfsrootparentname=`basename "$zfsrootparentfs"`
fi

# we read the output of fstab
# add to the list of our known filesystems
while read -r ignore mountpoint rest ; do
	if [ "$mountpoint" == "/sysroot" ] ; then continue ; fi
	if [ "$ignore" == "#" ] ; then continue ; fi
	if [ "$mountpoint" == "" ] ; then continue ; fi
        if [ "$mountpoint" == "/" ] ; then continue ; fi
        if [ "$mountpoint" == "swap" ] ; then continue ; fi

#	fstab-decode echo "$mountpoint" >> "$gendir"/mountpoints
#	fstab-decode no longer exists, need to find a replacement
#	meanwhile filesystems with spaces in their names won't work
	echo "$mountpoint" >> "$gendir"/mountpoints
        echo >> "$gendir"/mountpoints
done < /etc/fstab

OLDIFS="$IFS"
IFS="	"

# we read the output of zfs list
# add to the list of our known filesystems
while read -r name mountpoint canmount ; do
	if [ $canmount != on ] ; then continue ; fi
	if [ "$mountpoint" == "/sysroot" ] ; then continue ; fi
	if [ "$mountpoint" == "legacy" ] ; then continue ; fi
	if [ "$mountpoint" == "none" ] ; then continue ; fi

	echo -E "$mountpoint" >> "$gendir"/mountpoints
done < "$gendir"/listing

# we go through the output of zfs list
# and generate all the units
while read -r name mountpoint canmount ; do
	if [ $canmount != on ] ; then continue ; fi
	if [ "$mountpoint" == "/sysroot" ] ; then continue ; fi
	if [ "$mountpoint" == "legacy" ] ; then continue ; fi
	if [ "$mountpoint" == "none" ] ; then continue ; fi

        # the following logic excludes file systems part of the root pool that are not contained in the root file system
        if [ "$zfsrootparentname" == "ROOT" -o "$zfsrootparentname" == "RPOOL" ] ; then
            if [[ $name == $zfsrootparentfs/* ]] ; then
                if [[ $name != $zfsrootfs/* ]] ; then
                    echo "$scriptname: excluding $name -- it is not contained in root pool $zfsrootfs"
                    continue
                fi
            fi
        fi

	unitname=`escaping "$mountpoint"`.mount
	deps=`getdeps "$mountpoint"`
	extrabefore=
	if [ "$mountpoint" == "/var" ] ; then
		if find /lib/systemd /etc/systemd -type f -name var-run.mount | grep -q var-run.mount ; then
			extrabefore="$extrabefore var-run.mount"
		fi
		if find /lib/systemd /etc/systemd -type f -name var-run.mount | grep -q var-run.mount ; then
			extrabefore="$extrabefore var-lock.mount"
		fi
	fi
	echo -E "$scriptname: discovered mountable ZFS file system $mountpoint, adding to list"

	echo -E "[Unit]
Description=ZFS file system $name
Requires=$deps
Conflicts=umount.target
Before=local-fs.target umount.target$extrabefore
After=local-fs-pre.target $deps
DefaultDependencies=no

[Mount]
What=$name
Where=$mountpoint
Options=zfsutil
Type=zfs
" > "$gendir/$unitname"

	[ -L "$gendir/local-fs.target.requires/$unitname" ] || ln -s "$gendir/$unitname" "$gendir/local-fs.target.requires"

	# end of escaped loop
done < "$gendir"/listing

IFS="$OLDIFS"

# I am done, so now nuke them temp files
rm -f "$gendir"/listing "$gendir"/listing2 "$gendir"/mountpoints

echo "[Unit]
Description=ZFS service (dummy)

[Service]
Type=oneshot
ExecStart=/bin/true
" > "$gendir"/zfs.service


# if the root filesystem is on zfs, we need to disable remount-rootfs.service
# but I an disabling this code since systemd apparently does not pick up this unit file
# after it was generated
#
#if cat /proc/self/mounts | grep -q ' / zfs ' ; then
#
#	echo -E "$scriptname: ZFS file system on root, disabling remount-rootfs.service"
#
#	echo "[Unit]
#Description=Remount Root FS (no-op due to ZFS)
#DefaultDependencies=no
#Conflicts=shutdown.target
#After=systemd-readahead-collect.service systemd-readahead-replay.service fsck-root.service
#Before=local-fs-pre.target local-fs.target shutdown.target
#Wants=local-fs-pre.target
#
#[Service]
#Type=oneshot
#RemainAfterExit=yes
#ExecStart=/bin/true
#StandardOutput=syslog
#" > $gendir/remount-rootfs.service
#
#	[ -L "$gendir/local-fs.target.requires/remount-rootfs.service" ] || ln -s "$gendir/remount-rootfs.service" "$gendir/local-fs.target.requires"
#fi
