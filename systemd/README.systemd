This is a very basic ZFS unit generator, with support for boot-time generation of ZFS units
of all available zpools mounted at boot time.

What happens here is quite simple:

- systemd starts up
- systemd runs /lib/systemd/system-generators/*
- systemd picks up new files in /run/systemd/generator
- our systemd-zfs-generator simply creates unit files for each filesystem that has a
  mountpoint, canmount=yes, and is not /sysroot or /
- systemd loads these files as units, just as it would have loaded from /etc/systemd/system
- in the process of starting local-fs.target, it pulls in the units for ZFS file systems
  created by our generator
- finally, the initscript is overridden with a dummy unit so as to not cause any conflicts

How to use:

1. compile c program here
2. deploy to /lib/systemd/systemd-escaper
3. deploy systemd-zfs-generator to /lib/systemd/system-generators
4. reboot

TODO:

- support remount-rootfs.service (/bin/mount / -o remount,rw)
- support mounting of pools backed by cryptsetup or other storage devices detected
  late in the boot process
  right now it only works with whatever pools are available at VERY EARLY boot time, possibly
  even before all block devices are set up)

  plan:
	create a unit file zfs-late.service
	
	executes:
	zpool import -a
	zfs mount -a
	
	must run before local-fs.target
	
	must be wanted by local-fs.target
	
	must run after all known early zfs filesystem units have been mounted 

	must run after fedora-storage-init-late.service

- properly parse escaped mountpoints in /etc/fstab
- properly regen/reload autogenerated units when mountpoint and canmount properties are changed
  - systemctl stop involved mountpoints
  - change properties
  - regenerate units
  - systemctl start involved mountpoints
- properly regen/reload autogenerated units (and their dependencies) when zpools are imported / exported
  (doable with systemctl daemon-reload, worth doing it that way?)
- properly handle two file systems that have the same mountpoint property
  (probably they are on different pools)
- support zfs share / unshare
- respect the noauto property (create unit, but do not create symlink for that
  file system in local-fs.target.wants, skip it from the Requires list of all other
  ZFS file system units. atm we skip creating the unit)
- parse all existing file system units to get more file system dependencies
  at the moment we only parse fstab
- register ALL available zvols as device units
  (maybe this is done automatically by udev?)
- find a way to export pools at shutdown (probably involves pivot_root)
- MAYBE: use automount units to make ZFS mount file systems on demand, rather than
  at boot up, as they are discovered
  (potential to speed boot up even more)
- MAYBE: dynamic regeneration of units every time a zfs create / zfs rename / zfs destroy is done
- MAYBE: redirect mounting of file systems when `zfs mount` or `zfs create`  happens, shunting it
  to `systemctl start`
  this item may not be necessary, if we ascertain that systemd automatically updates
  the status of units based on zfs umount
- MAYBE: redirect unmounting of a file system to `systemctl stop`
  this item nay not be necessary (see list item above this one)

But, all in all, this works.
