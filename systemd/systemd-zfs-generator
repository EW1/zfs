#!/bin/bash

set -e

zpool --help >/dev/null 2>&1 || {
	exit 0
}

scriptname=`basename "$0"`
scriptdir=`dirname "$0"`
echo "$scriptname: ZFS support available"

if [ -f /etc/zfs/zpool.cache ] ; then
	echo "$scriptname: importing all pools that were imported before last reboot"
	output=`zpool import -aN -c /etc/zfs/zpool.cache 2>&1`
	if [ -z "$output" ] ; then output=successful ; fi
	echo -E "$scriptname: $output"
fi

gendir="$1"
if [ -z "$gendir" ] ; then gendir=/run/systemd/generator ; fi
mkdir -p $gendir

escaper="$scriptdir"/../systemd-escaper
[ -x "$escaper" ] || escaper=/lib/systemd/systemd-escaper
[ -x "$escaper" ] || escaper=./systemd-escaper
[ -x "$escaper" ] || escaper=systemd-escaper

function escaping() {
	"$escaper" --escape "$1"
}

function getdeps() {

	mountpoint=`dirname "$1"`
	while true ; do
		if [ "$mountpoint" == "/" ] ; then break ; fi
		if grep -Fxq "$mountpoint" "$gendir"/mountpoints ; then
			echo -n `escaping "$mountpoint"`.mount
			echo -n " "
		fi
		mountpoint=`dirname "$mountpoint"`
	done

}

# preparations
rm -f "$gendir"/listing "$gendir"/listing2 "$gendir"/mountpoints

echo "$scriptname: discovering early available ZFS file systems"
zfs list -H -o name,mountpoint,canmount > "$gendir"/listing

# we read the output of fstab
# add to the list of our known filesystems
# FIXME, \040 escaping done properly
while read -r ignore mountpoint rest ; do
	if [ "$mountpoint" == "/sysroot" ] ; then continue ; fi
	if [ "$ignore" == "#" ] ; then continue ; fi
	if [ "$mountpoint" == "" ] ; then continue ; fi
	if [ "$mountpoint" == "/" ] ; then continue ; fi

	echo -E "$mountpoint" >> "$gendir"/mountpoints
done < /etc/fstab

OLDIFS="$IFS"
IFS="	"

# we read the output of zfs list
# add to the list of our known filesystems
while read -r name mountpoint canmount ; do
	if [ $canmount != on ] ; then continue ; fi
	if [ "$mountpoint" == "/sysroot" ] ; then continue ; fi
	if [ "$mountpoint" == "legacy" ] ; then continue ; fi
	if [ "$mountpoint" == "none" ] ; then continue ; fi
	
	echo -E "$mountpoint" >> "$gendir"/mountpoints
done < "$gendir"/listing

# we go through the output of zfs list
# and generate all the units 
while read -r name mountpoint canmount ; do
	if [ $canmount != on ] ; then continue ; fi
	if [ "$mountpoint" == "/sysroot" ] ; then continue ; fi
	if [ "$mountpoint" == "legacy" ] ; then continue ; fi
	if [ "$mountpoint" == "none" ] ; then continue ; fi

	unitname=`escaping "$mountpoint"`.mount
	deps=`getdeps "$mountpoint"`
	[ "$mountpoint" == "/var" ] && extrabefore=" var-run.mount var-lock.mount" || extrabefore=

	echo -E "$scriptname: discovered mountable ZFS file system $mountpoint, adding to list"

	echo -E "[Unit]
Description=ZFS file system $name
Requires=$deps
Conflicts=umount.target
Before=local-fs.target umount.target$extrabefore
After=local-fs-pre.target $deps
DefaultDependencies=no

[Mount]
What=$name
Where=$mountpoint
Options=zfsutil
Type=zfs
" > "$gendir/$unitname"

	mkdir -p "$gendir/local-fs.target.wants"
	[ -L "$gendir/local-fs.target.wants/$unitname" ] || ln -s "$gendir/$unitname" "$gendir/local-fs.target.wants"

	# end of escaped loop
done < "$gendir"/listing

IFS="$OLDIFS"

# I am done, so now nuke them temp files
rm -f "$gendir"/listing "$gendir"/listing2 "$gendir"/mountpoints

echo "[Unit]
Description=ZFS service (dummy)

[Service]
Type=oneshot
ExecStart=/bin/true
" > "$gendir"/zfs.service


# if the root filesystem is on zfs, we need to disable remount-rootfs.service
# but I an disabling this code since systemd apparently does not pick up this unit file
# after it was generated
#
#if cat /proc/self/mounts | grep -q ' / zfs ' ; then
#
#	echo -E "$scriptname: ZFS file system on root, disabling remount-rootfs.service"
#
#	echo "[Unit]
#Description=Remount Root FS (no-op due to ZFS)
#DefaultDependencies=no
#Conflicts=shutdown.target
#After=systemd-readahead-collect.service systemd-readahead-replay.service fsck-root.service
#Before=local-fs-pre.target local-fs.target shutdown.target
#Wants=local-fs-pre.target
#
#[Service]
#Type=oneshot
#RemainAfterExit=yes
#ExecStart=/bin/true
#StandardOutput=syslog
#" > $gendir/remount-rootfs.service
#
#	[ -L "$gendir/local-fs.target.wants/remount-rootfs.service" ] || ln -s "$gendir/remount-rootfs.service" "$gendir/local-fs.target.wants"
#fi
